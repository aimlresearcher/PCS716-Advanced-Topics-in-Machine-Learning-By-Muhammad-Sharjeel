# -*- coding: utf-8 -*-
"""FA24-PCS-007_assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZuNWd6EBuzfmTOtZkytNpbXs2ufN1IMP

### !conda list
The !conda list command is used to display a list of all the packages installed in the current conda environment. This command is especially useful for checking which libraries are available, their versions.
"""

!conda list

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as nsn

"""# Task 1: Lists, Dictionaries, Tuples
- 1.1.  Create a list: nums = [3, 5, 7, 8, 12], make another list named cubes and append the cubes of the given list nums
in this list and print it.
"""

# Define a list of numbers
nums = [3, 5, 7, 8, 12]

# Initialize an empty list to store the cubes of the numbers
cubes = []

# Loop through each number in the nums list
for num in nums:
    # Calculate the cube of the current number and append it to the cubes list
    cubes.append(num ** 3)

# Concatenate the original nums list with the cubes list
nums = nums + cubes

# Print the combined list which now contains both the original numbers and their cubes
print(nums)

"""1.2.  Create an empty dictionary: dict = {}, add the following data to the dictionary: parrot: 2, goat: 4, spider: 8, crab:
10 as key value pairs.
"""

# Create an empty dictionary
dict = {}

# Add the specified key-value pairs to the dictionary
dict['parrot'] = 2
dict['goat'] = 4
dict['spider'] = 8
dict['crab'] = 10

# Print the resulting dictionary
print(dict)

"""1.3.  Use the items method to loop over the dictionary (dict) and print the animals and their corresponding legs. Sum
the legs of each animal, and print the total at the end.
"""

# Initialize a variable to keep the sum of legs
total_legs = 0

# Use the items() method to loop over the dictionary
for animal, legs in dict.items():
    # Print the animal and its corresponding number of legs
    print(f"{animal}: {legs} legs")

    # Add the number of legs to the total
    total_legs += legs

# Print the total number of legs
print(f"Total legs: {total_legs}")

"""1.4.  Create a tuple: A = (3, 9, 4, [5, 6]), change the value in the list from 5 to 8."""

# Create the tuple with a list inside
A = (3, 9, 4, [5, 6])

# Access the list inside the tuple and change the value 5 to 8
A[3][0] = 8

# Print the modified tuple
print(A)

"""1.5.  Delete the tuple A."""

# Delete the tuple
del A

"""1.6.  Create another tuple: B = (a, p, p, l, e), print the number of occurrences of p in the tuple."""

# Create the tuple
B = ('a', 'p', 'p', 'l', 'e')

# Count the number of occurrences of 'p' in the tuple
count_p = B.count('p')

# Print the count
print(count_p)

"""1.7.  Print the index of l in the tuple."""

# Find the index of 'l' in the tuple
index_l = B.index('l')

# Print the index
print(index_l)

"""# Task 2: Numpy
Use built-in functions of numpy library to complete this task.
List of functions available here (https://numpy.org/doc/1.19/genindex.html)
"""

A = [[1, 2, 3, 4],
     [5, 6, 7, 8],
     [9, 10, 11, 12]]
z = np.array([1,0,1])

"""2.1  Convert matrix A into numpy array"""

A = np.array(A)
A

"""2.2  Use slicing to pull out the subarray consisting of the first 2 rows and columns 1 and 2. Store it in b which is a numpy
array of shape (2, 2).
"""

# Use slicing to extract the subarray of the first 2 rows and columns 1 and 2
b = A[:2, 1:3]

# Print the subarray
print(b)

"""2.3  Create an empty matrix C with the same shape as A."""

# Create an empty matrix C with the same shape as A
C = np.empty(A.shape)

# Print the empty matrix C
print(C)

"""2.4  Add the vector z to each column of the matrix A with an explicit loop and store it in C."""

# Add the vector z to each column of A using an explicit loop
for col in range(A.shape[1]):
    C[:, col] = A[:, col] + z

# Print the resulting matrix C
print(C)

"""Create the following

])
"""

X = np.array([[1,2],[3,4]])
Y = np.array([[5,6],[7,8]])
v = np.array([9,10])

"""2.5  Add and print the matrices X and Y."""

# Add the matrices X and Y
addition = X + Y

# Print the result
print("Addition of X and Y:")
print(addition)

"""2.6  Multiply and print the matrices X and Y."""

# Multiply the matrices X and Y
multiplication = np.dot(X, Y)

# Print the result
print("\nMultiplication of X and Y:")
print(multiplication)

"""2.7  Compute and print the element wise square root of matrix Y."""

# Compute the element-wise square root of matrix Y
sqrt_Y = np.sqrt(Y)

# Print the result
print("\nElement-wise square root of Y:")
print(sqrt_Y)

"""2.8  Compute and print the dot product of the matrix X and vector v."""

# Compute the dot product of matrix X and vector v
dot_product = np.dot(X, v)

# Print the result
print("\nDot product of X and v:")
print(dot_product)

"""2.9  Compute and print the sum of each column of X."""

# Compute the sum of each column of X
column_sum = np.sum(X, axis=0)

# Print the result
print("\nSum of each column of X:")
print(column_sum)

"""# Task 3: Functions and Loops

3.1  Create a function Compute that takes two arguments, distance and time, and use it to calculate velocity.
"""

# Define the function Compute
def Compute(distance, time):
    # Calculate velocity
    velocity = distance / time
    return velocity

# Example usage of the function
distance = 100  # Example distance in meters
time = 20       # Example time in seconds

# Calculate velocity using the Compute function
velocity = Compute(distance, time)

# Print the result
print(f"Velocity: {velocity} m/s")

"""3.2 Make a list named even_num that contains all even numbers up till 12. Create a function mult that takes the list
even_num  as an argument and calculates the products of all entries using a for loop.
"""

# Create a list named even_num that contains all even numbers up to 12
even_num = [2, 4, 6, 8, 10, 12]

# Define the function mult that calculates the product of all entries in the list
def mult(numbers):
    product = 1  # Initialize the product variable
    for num in numbers:  # Loop through each number in the list
        product *= num  # Multiply each number with the current product
    return product

# Calculate the product of all entries in the list even_num
result = mult(even_num)

# Print the result
print(f"The product of all entries in even_num is: {result}")

"""# Task 4: Pandas
Create a Pandas dataframe named pd that contains 5 rows and 4 columns, similar to the one given below:
"""

# Creating the DataFrame
data = {
    'C1': [1, 2, 3, 5, 5],
    'C2': [6, 7, 5, 4, 8],
    'C3': [7, 9, 8, 6, 5],
    'C4': [7, 5, 2, 8, 8]
}

# Create the dataframe named 'pd'
df = pd.DataFrame(data)

"""4.1  Print only the first two rows of the dataframe."""

# Display the data frame
print(df)

"""4.2  Print the second column."""

# Print the second column 'C2'
print(df['C2'])

"""4.3  Change the name of the third column from C3 to B3."""

# Rename the third column from 'C3' to 'B3'
df = df.rename(columns={'C3': 'B3'})

# Display the updated dataframe
print(df)

"""4.4  Add a new column to the dataframe and name it Sum."""

# Add a new column 'Sum' which is the sum of each row
df['Sum'] = df.sum(axis=1)

# Display the updated dataframe
print(df)

"""4.5  Sum the entries of each row and add the result in the column Sum."""

# Add a new column 'Sum' that contains the sum of each row's entries
df['Sum'] = df.sum(axis=1)

# Display the updated dataframe
print(df)

"""4.6 Read CSV file named hello_sample.csv (the file is available in the class Google Drive shared folder) into a Pandas
dataframe.
"""

import pandas as pd

# Reading the CSV file into a DataFrame
df_csv = pd.read_csv('hello_sample.csv')

"""4.7  Print complete dataframe."""

# Display the dataframe
print(df_csv)

"""4.8  Print only bottom 2 records of the dataframe."""

# Print the bottom 2 records of the DataFrame
print(df_csv.tail(2))

"""4.9  Print information about the dataframe."""

# Print information about the DataFrame
df_csv.info()

"""4.10  Print shape (rows x columns) of the dataframe."""

# Print information about the DataFrame
df_csv.shape

"""4.11  Sort the data of the dataFrame using column Weight."""

# Sort the DataFrame by the 'Weight' column
df_sorted = df_csv.sort_values(by='Weight')

# Display the sorted DataFrame
print(df_sorted)

"""4.12  Use isnull() and dropna() methods of the Pandas dataframe and see if they produce any changes."""

# Drop rows with any missing values
df_cleaned = df_csv.dropna()

# Display the DataFrame after dropping rows with null values
print(df_cleaned)

